{%
--[[
################################################################
#                                                              #
#   CMakeLists.txt template                                    #
#                                                              #
################################################################
--]]
local lub = require 'lub'
local lut = require 'lut'
local platlibs  = BUILD.platlibs  or {}
local platdefs  = BUILD.platdefs  or {}
local libraries = BUILD.libraries or {}
local sources   = BUILD.sources   or {}
%}
#
# MACHINE GENERATED FILE. DO NOT EDIT.
#
# CMake build file for {{type}}
#
# This file has been generated by lut.Builder {{lut.VERSION}}
#

cmake_minimum_required(VERSION 2.8)
# --------------------------------------------------------------
#  {{type}}
# --------------------------------------------------------------
set(MODULE_NAME {{type}})

# Where to install Lua files
if(LUA_INSTALL_DIR)
  set(INSTALL_PATH ${LUA_INSTALL_DIR})
else(LUA_INSTALL_DIR)
  set(INSTALL_PATH "${CMAKE_BINARY_DIR}/lib" CACHE STRING "Install directory path")
endif(LUA_INSTALL_DIR)
message("INSTALL Lua    '{{type}}' TO '${INSTALL_PATH}'")

{% if not BUILD.pure_lua then %}
# Where to install binary modules
if(LUA_INSTALL_BINDIR)
  set(INSTALL_BINPATH ${LUA_INSTALL_BINDIR})
else(LUA_INSTALL_BINDIR)
  set(INSTALL_BINPATH "${CMAKE_BINARY_DIR}/lib" CACHE STRING "Install directory path")
endif(LUA_INSTALL_BINDIR)
message("INSTALL binary '{{type}}' TO '${INSTALL_BINPATH}'")
{% end %}

# --------------------------------------------------------------
#  module
# --------------------------------------------------------------
add_custom_target(${MODULE_NAME} true)

{% if not BUILD.pure_lua then %}

# -------- PLAT
set(LINK_LIBS {{ lub.join(libraries, ' ') }})

if(UNIX)
  if(APPLE)
    set(PLAT "macosx")
{% if platdefs.macosx then 
for _, k in ipairs(platdefs.macosx) do %}
    add_definitions(-D{{k}})
{% end; end %}
    set(LINK_FLAGS "-bundle -undefined dynamic_lookup -all_load")
{% if platlibs.macosx then %}
    set(LINK_LIBS "{{ lub.join(platlibs.macosx, '" "') }}")
{% end %}
  else(APPLE)
    set(PLAT "linux")
{% if platdefs.linux then 
for _, k in ipairs(platdefs.linux) do %}
    add_definitions(-D{{k}})
{% end; end %}
    set(LINK_FLAGS "-shared")
{% if platlibs.linux then %}
    set(LINK_LIBS "{{ lub.join(platlibs.linux, '" "') }}")
{% end %}
  endif(APPLE)
else(UNIX)
  if(WIN32)
    set(PLAT "win32")
{% if platdefs.win32 then 
for _, k in ipairs(platdefs.win32) do %}
    add_definitions(-D{{k}})
{% end; end %}
{% if platlibs.win32 then %}
    set(LINK_LIBS "{{ lub.join(platlibs.win32, '" "') }}")
{% end %}
  else(WIN32)
    set(PLAT "unsupported")
  endif(WIN32)
endif(UNIX)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -Wall -fPIC -O2")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -Wall -fPIC -O2")
if (RELEASE)
  add_definitions(-O2 -DNDEBUG)
endif(RELEASE)

# --------------------------------------------------------------
#  {{type}}.core
# --------------------------------------------------------------
set(core "${MODULE_NAME}_core")

include_directories(/usr/local/include {{ lub.join(BUILD.includes, ' ') }})

file(GLOB CORE_SOURCES {{ lub.join(BUILD.sources, ' ') }})

add_library(${core} MODULE ${CORE_SOURCES})
if(LINK_LIBS)
  target_link_libraries(${core} ${LINK_LIBS})
endif(LINK_LIBS)
set_target_properties(${core}
  PROPERTIES OUTPUT_NAME core
  LINK_FLAGS ${LINK_FLAGS}
  PREFIX ""
  SUFFIX ".so"
)  

{% if BUILD.cmake_extra then %}
{{BUILD.cmake_extra}}
{% end %}

add_dependencies(${MODULE_NAME} ${core})

# --------------------------------------------------------------
#  install                                     
# --------------------------------------------------------------
install(TARGETS ${core}
  DESTINATION ${INSTALL_BINPATH}/${MODULE_NAME}
)

{% end %}
# --------------------------------------------------------------
#  install                                     
# --------------------------------------------------------------
install(DIRECTORY ${MODULE_NAME}
  DESTINATION ${INSTALL_PATH}
)


